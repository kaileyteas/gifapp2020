{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gif","title","images","className","src","fixed_height","url","alt","App","useState","text","setText","gifs","setGifs","getGifs","a","console","log","fetch","r","json","body","data","TextField","id","label","fullWidth","variant","value","onChange","e","target","onKeyPress","key","Button","color","onClick","map","gif","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,uKCuD3C,SAASC,EAAT,GAA8B,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,OACnB,OAAO,yBAAKC,UAAU,OACpB,yBAAKC,IAAKF,EAAOG,aAAaC,IAAKC,IAAI,QACvC,yBAAKJ,UAAU,aAAaF,IAIjBO,MAxDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,cAIEC,IAJF,2EAIb,gCAAAC,EAAA,6DACEC,QAAQC,IAAI,mBACA,mCACRX,EAAM,wCACVA,GAAO,2CACPA,GAAO,MAAQI,EALjB,SAOkBQ,MAAMZ,GAPxB,cAOQa,EAPR,iBAQqBA,EAAEC,OARvB,QAQQC,EARR,OASER,EAAQQ,EAAKC,MACbX,EAAQ,IAVV,6CAJa,sBAmBb,OAFAK,QAAQC,IAAIL,GAGV,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,cAEb,kBAACoB,EAAA,EAAD,CAAWC,GAAG,iBACZC,MAAM,aACNC,WAAS,EAACC,QAAQ,WAClBC,MAAOlB,EACPmB,SAAU,SAAAC,GAAC,OAAGnB,EAAQmB,EAAEC,OAAOH,QAC/BI,WAAY,SAAAF,GACC,UAARA,EAAEG,KAAenB,OAGxB,kBAACoB,EAAA,EAAD,CAAQP,QAAQ,YAAYQ,MAAM,UAChCC,QAAStB,GADX,SAKF,yBAAKX,UAAU,QACZS,EAAKyB,KAAI,SAACC,EAAIC,GAAL,OAAU,kBAACvC,EAAD,eAAKiC,IAAKM,GAAOD,WCjC3BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7031682c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button';\n\nfunction App() {\n  const [text, setText] = useState('')\n  const [gifs, setGifs] = useState([])\n\n  async function getGifs(){\n    console.log(\"Get information\")\n    const key = 'voimtxRjvTMO2LtI4kAD6xBDySCuplT1'\n    let url = \"https://api.giphy.com/v1/gifs/search?\"\n    url += 'api_key=' + key\n    url += '&q=' + text\n    /** Using await methods (or asynchronous methods) requires async methods */\n    const r = await fetch(url)\n    const body = await r.json()\n    setGifs(body.data)\n    setText('')\n  }\n\n  console.log(gifs)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"input-wrap\">\n          {/** This is a text field component from material-ui */}\n          <TextField id=\"outlined-basic\" \n            label=\"Enter text\" \n            fullWidth variant=\"outlined\"\n            value={text}\n            onChange={e=> setText(e.target.value)}\n            onKeyPress={e=>{\n              if(e.key==='Enter') getGifs()\n          }}/>\n          {/** this is a button component from material-ui */}\n          <Button variant=\"contained\" color=\"primary\"\n            onClick={getGifs}>\n            send\n          </Button>\n        </div>\n        <div className=\"gifs\">\n          {gifs.map((gif,i)=> <Gif key={i} {...gif}/>)}\n        </div>\n      </header>\n    </div>\n  );\n}\n\n/**Gif component\n * You'll probably want to make this in another file next time\n */\nfunction Gif({title, images}){\n  return <div className=\"gif\">\n    <img src={images.fixed_height.url} alt=\"gif\"/>\n    <div className=\"gif-title\">{title}</div>\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}